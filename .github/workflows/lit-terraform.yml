name: Reusable Terraform Workflow

on:
  workflow_call:
    inputs:
      version:
        type: string
        required: true
      environment_plan:
        type: string
        required: true
      environment_apply:
        type: string
        required: true
      infra_dir:
        type: string
        required: true
      working_dir:
        type: string
        required: false
      account_id:
        type: string
        required: true
      aws_default_region:
        type: string
        required: true
      main_branch:
        type: string
        required: false
        default: main
      enable_branch_apply:
        type: boolean
        required: false
        default: false
      continue_on_error:
        type: boolean
        required: false
        default: false
    secrets:
      role_to_assume:
        required: true
      tf_env_vars:
        required: false

env:
  INFRA_DIR: ${{ inputs.infra_dir }}

permissions:
  id-token: write
  contents: read

jobs:
  plan:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.working_dir }}
    environment:
      name: ${{ inputs.environment_plan }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
            role-to-assume: arn:aws:iam::${{ inputs.account_id }}:role/${{ secrets.role_to_assume }}
            aws-region: ${{ inputs.aws_default_region }}

      - name: Masked secret tf_ev_vars values
        run: |
          echo "${{ secrets.tf_env_vars }}" | while IFS= read -r line ; do
              value="${line#*=}"
              echo "::add-mask::$value"
          done

      - name: Write tf_env_vars to GITHUB_ENV file
        run: |
          cat > $GITHUB_ENV << EOF
          ${{ secrets.tf_env_vars }}
          EOF

      - name: Terraform Format
        run: lit-terraform fmt $INFRA_DIR

      - name: Terraform Init
        run: lit-terraform init $INFRA_DIR

      - name: Terraform Plan
        run: lit-terraform plan $INFRA_DIR
        continue-on-error: ${{ inputs.continue_on_error }}

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ github.workflow }}-${{ github.run_id }}-${{ github.run_attempt }}-${{ hashFiles(format('{0}/{1}', inputs.working_dir, inputs.infra_dir)) }}
          path: |
            ${{ inputs.working_dir }}/lit-terraform-plan/**/*.plan
            ${{ inputs.working_dir }}/lit-terraform-plan/**/*.json
            ${{ inputs.working_dir }}/lit-terraform-plan/**/*.hcl
          retention-days: 1

  apply:
    needs: plan
    if: ${{ github.ref_name == inputs.main_branch || inputs.enable_branch_apply }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.working_dir }}
    environment:
      name: ${{ inputs.environment_apply }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials using OIDC
        uses: aws-actions/configure-aws-credentials@v2
        with:
            role-to-assume: arn:aws:iam::${{ inputs.account_id }}:role/${{ secrets.role_to_assume }}
            aws-region: ${{ inputs.aws_default_region }}

      - name: Masked secret tf_ev_vars values
        run: |
          echo "${{ secrets.tf_env_vars }}" | while IFS= read -r line ; do
              value="${line#*=}"
              echo "::add-mask::$value"
          done

      - name: Write tf_env_vars to GITHUB_ENV file
        run: |
          cat > $GITHUB_ENV << EOF
          ${{ secrets.tf_env_vars }}
          EOF

      - name: terraform init
        run: lit-terraform init ${INFRA_DIR}
      - uses: actions/download-artifact@v4
        with:
          name: ${{ github.workflow }}-${{ github.run_id }}-${{ github.run_attempt }}-${{ hashFiles(format('{0}/{1}', inputs.working_dir, inputs.infra_dir)) }}
          path: |
            ${{ inputs.working_dir }}/lit-terraform-plan
      - name: terraform apply
        run: lit-terraform apply ${INFRA_DIR}
        continue-on-error: ${{ inputs.continue_on_error }}
