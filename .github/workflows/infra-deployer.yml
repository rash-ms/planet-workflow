on:
  workflow_call:
      inputs:
          working_dir:
              description: "Describing the path to the terraform module configuration"
              required: false
              type: string
          version:
              description: "Terraform Version to be used"
              type: string
              default: "~1.2.6"
          environment_plan:
              description: "The prefix of the Github env for the plan"
              required: false
              type: string
          environment_apply:
              description: "The prefix of the Github env for the apply"
              required: false
              type: string
          notify_environment:
              description: "The prefix of the Github env for the apply"
              required: false
              type: string
          main_branch:
              type: string
              default: main
          infra_dir:
              type: string
              required: true
              description: "The path to the module terraform tfvars files"
          aws_default_region:
              description: "AWS region for the plan and apply"
              type: string
              required: true
              default: "us-east-1"
          enable_branch_apply:
              type: boolean
              required: false
              default: false
          retention_days:
              type: number
              required: false
              default: 1
          selected_modules:
              type: string
              description: 'Comma-separated list of modules to run (e.g., network,auth) or "all"'
              required: false
              default: 'complete-modules'
      secrets:
          account_id:
              required: true
          role_to_assume:
              required: true
          destroyer_token:
            required: true
          render_webhook_url:
            required: true
          tf_env_vars:
              required: false

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ${{ inputs.aws_default_region }}
jobs:
  plan:
      name: Terraform Plan
      runs-on: ubuntu-latest
      environment: ${{ inputs.environment_plan }}
      outputs:
          infra_dir: ${{ steps.terraform_modules.outputs.infra_dir }}
      steps:
          - name: Checkout Respository
            uses: actions/checkout@v4

          - name: Configure AWS credentials using OIDC
            uses: aws-actions/configure-aws-credentials@v2
            with:
                role-to-assume: arn:aws:iam::${{ secrets.account_id }}:role/${{ secrets.role_to_assume }}
                aws-region: ${{ inputs.aws_default_region }}
      
          - uses: hashicorp/setup-terraform@v3
            name: Setup Terraform
            with:
              terraform_version: ${{ inputs.version }}
              terraform_wrapper: false

          - name: Verify Caller Identity
            run: |
              echo "AWS Account: $(aws sts get-caller-identity --query Account --output text)"
              echo "Role Verified: $(aws sts get-caller-identity --query Arn --output text | sed 's/:[^:]*$/:**MASKED**/g')"
              echo "Verifying AWS Identity..."
              aws sts get-caller-identity
          
          - name: Masked secret tf_ev_vars values
            run: |
              echo "${{ secrets.tf_env_vars }}" | while IFS= read -r line ; do
                  value="${line#*=}"
                  echo "::add-mask::$value"
              done
          - name: Write tf_env_vars to GITHUB_ENV file
            run: |
              cat > $GITHUB_ENV << EOF
              ${{ secrets.tf_env_vars }}
              EOF

          - name: Discover and Filter Terraform Modules
            id: terraform_modules
            run: |
                set -e
            
                working_dir="${{ inputs.working_dir }}"
                infra_root="${{ inputs.infra_dir }}"
                selected_modules="${{ inputs.selected_modules }}"
                IFS=',' read -ra selected_array <<< "$selected_modules"
            
                # Trim spaces from input
                for i in "${!selected_array[@]}"; do
                  selected_array[$i]=$(echo "${selected_array[$i]}" | xargs)
                done
            
                full_path="$working_dir/$infra_root"
                declare -a infra_dir=()
            
                # List all immediate subdirectories in the infra_root
                module_dirs=($(find "$full_path" -mindepth 1 -maxdepth 1 -type d))
            
                if [ ${#module_dirs[@]} -eq 0 ]; then
                  echo "No modules found in $full_path"
                  exit 1
                fi
            
                for module_dir in "${module_dirs[@]}"; do
                  module_name=$(basename "$module_dir")
            
                  # If 'complete-modules' is NOT selected, only include matching modules
                  if [[ ! " ${selected_array[*]} " =~ " complete-modules " ]]; then
                    skip=true
                    for selected in "${selected_array[@]}"; do
                      if [[ "$selected" == "$module_name" ]]; then
                        skip=false
                        break
                      fi
                    done
                    if $skip; then
                      continue
                    fi
                  fi
            
                  # Add module path to output array
                  infra_dir+=("${infra_root}/${module_name}")
                done
            
                # Output the final module list
                echo "Discovered Terraform modules to run:"
                for path in "${infra_dir[@]}"; do
                  echo "- $path"
                done
            
                echo "infra_dir=$(IFS=, ; echo "${infra_dir[*]}")" >> "$GITHUB_OUTPUT"
            

          - name: Terraform Format
            run: |
              error_flag=0
              IFS=',' read -r -a infra_dirs <<< "${{ steps.terraform_modules.outputs.infra_dir }}"
              for infra_dir in "${infra_dirs[@]}"; do
                  module=$(basename "$infra_dir")
                  echo -e "\003[35m Format: ${{ inputs.working_dir }}/terraform/$module \033[0m \n"
                  terraform fmt -diff=true -write=false -check=true "${{ inputs.working_dir }}/terraform/$module" || error_flag=1
              done
              if [[ error_flag -ne 0 ]]; then exit 1; fi
          
          - name: Initialising Terraform
            run: |
              set +e
              IFS=',' read -r -a infra_dirs <<< "${{ steps.terraform_modules.outputs.infra_dir }}"
              for infra_dir in "${infra_dirs[@]}"; do
                  module=$(basename "$infra_dir")
                  echo -e "--------------- \n \033 [35m init: $infra_dir \033[0m \n--------------"
                  cd "${{ inputs.working_dir }}/terraform/$module" > /dev/null || exit 1
                  terraform init -backend-config="../../$infra_dir/backend.tfvars" || error_flag=1
                  cd - > /dev/null
              done
              if [[ error_flag -ne 0 ]]; then exit 1; fi

          - name: Terraform Validate
            run: |
              set +e
              IFS=',' read -r -a infra_dirs <<< "${{ steps.terraform_modules.outputs.infra_dir }}"
              for infra_dir in "${infra_dirs[@]}"; do
                  module=$(basename "$infra_dir")
                  echo -e "---------------\n \033[35m Validate: ${{ inputs.working_dir }}/terraform/$module |033[0m \n-------------"
                  cd "${{ inputs.working_dir }}/terraform/$module" > /dev/null || exit 1
                  terraform validate || error_flag=1
                  if ! grep -qr 'backend "s3"'; then
                      echo -e "\033[31m ERROR: The backend in ${{ inputs.working_dir }}/terraform/$module not in 'backend \"s3\"'. \033[0m"; error_flag=1
                  fi
                  cd - > /dev/null
              done
              if [[ error_flag -ne 0 ]]; then exit 1; fi

          - name: Terraform Plan
            id: plan
            run: |
              set +e
              mkdir -p "terraform_plan"
              IFS=',' read -r -a infra_dirs <<< "${{ steps.terraform_modules.outputs.infra_dir }}"
              for infra_dir in "${infra_dirs[@]}"; do
                  module=$(basename "$infra_dir")
                  echo -e "-------------\n \033[35m plan: $infra_dir \033[0m \n -------------"
                  cd "${{ inputs.working_dir }}/terraform/$module" > /dev/null || exit 1
                  plan_dir="${infra_dir//\//-}"
                  terraform plan -lock-timeout=30s -var-file="../../$infra_dir/terraform.tfvars" -out="$GITHUB_WORKSPACE/terraform_plan/${plan_dir}.plan" || error_flag=1
                  echo "# Terraform Plan for $module" >> $GITHUB_STEP_SUMMARY
                  echo '```' >> $GITHUB_STEP_SUMMARY
                  terraform show -no-color "$GITHUB_WORKSPACE/terraform_plan/${plan_dir}.plan" >> $GITHUB_STEP_SUMMARY
                  echo '```' >> $GITHUB_STEP_SUMMARY
                  cd - > /dev/null
              done
              if [[ error_flag -ne 0 ]]; then exit 1; fi
          
          - name: Upload Artifact
            uses: actions/upload-artifact@v4
            with:
              name: ${{ github.workflow }}-${{ github.run_id }}-${{ github.run_attempt }}-${{ hashFiles(format('{0}/{1}', inputs.working_dir, inputs.infra_dir)) }}
              path: |
                  terraform_plan/*.plan
              retention-days: ${{ inputs.retention_days }}
                
          - name: Verify Plan Files Before Upload
            run: |
              ls -l terraform_plan/
           
  apply:
      needs: plan
      if: ${{ github.ref_name == inputs.main_branch || inputs.enable_branch_apply == true }}
      name: Terraform Apply
      runs-on: ubuntu-latest
      environment: ${{ inputs.environment_apply }}
      steps:
          - uses: actions/checkout@v4
          - name: Configure AWS credentials using OIDC
            uses: aws-actions/configure-aws-credentials@v2
            with:
                role-to-assume: arn:aws:iam::${{ secrets.account_id }}:role/${{ secrets.role_to_assume }}
                aws-region: ${{ inputs.aws_default_region }}

          - uses: hashicorp/setup-terraform@v3
            name: Setup Terraform
            with:
              terraform_version: ${{ inputs.version }}
              terraform_wrapper: false

          - name: Verify Caller Identity
            run: |
               echo "AWS Account: $(aws sts get-caller-identity --query Account --output text)"
               echo "Role Verified: $(aws sts get-caller-identity --query Arn --output text | sed 's/:[^:]*$/:**MASKED**/g')"
               echo "Verifying AWS Identity..."
               aws sts get-caller-identity

          - name: Masked secret tf_ev_vars values
            run: |
              echo "${{ secrets.tf_env_vars }}" | while IFS= read -r line ; do
                  value="${line#*=}"
                  echo "::add-mask::$value"
              done

          - name: Write tf_env_vars to GITHUB_ENV file
            run: |
              cat > $GITHUB_ENV << EOF
              ${{ secrets.tf_env_vars }}
              EOF

          - name: Download Artifact
            uses: actions/download-artifact@v4
            with:
                name: ${{ github.workflow }}-${{ github.run_id }}-${{ github.run_attempt }}-${{ hashFiles(format('{0}/{1}', inputs.working_dir, inputs.infra_dir)) }}
                path: |
                    terraform_plan/      

          - name: Verify Downloaded Plan
            run: |
              ls -l terraform_plan/

          - name: Initialising Terraform
            run: |
              set +e
              IFS=',' read -r -a infra_dirs <<< "${{ needs.plan.outputs.infra_dir }}"
              for infra_dir in "${infra_dirs[@]}"; do
                  module=$(basename "$infra_dir")
                  echo -e "--------------- \n \033 [35m init: $infra_dir \033[0m \n--------------"
                  cd "${{ inputs.working_dir }}/terraform/$module" > /dev/null || exit 1
                  terraform init -backend-config="../../$infra_dir/backend.tfvars" || error_flag=1
                  cd - > /dev/null
              done
              if [[ error_flag -ne 0 ]]; then exit 1; fi
              
          - name: Terraform Plan
            id: plan
            run: |
                set +e
                IFS=',' read -r -a infra_dirs <<< "${{ needs.plan.outputs.infra_dir }}"
                for infra_dir in "${infra_dirs[@]}"; do
                    module=$(basename "$infra_dir")
                    echo -e "-------------\n \033[35m Apply: $infra_dir \033[0m \n -------------"
                    cd "${{ inputs.working_dir }}/terraform/$module" > /dev/null || exit 1
                    echo "${{ inputs.working_dir }}/terraform/$module"

                    plan_dir="${infra_dir//\//-}"
                    plan_path="$GITHUB_WORKSPACE/terraform_plan/${plan_dir}.plan"  
                    
                    if [[ ! -f "$plan_path" ]]; then
                        echo "Plan file not found at: $plan_path"
                        exit 1
                    fi  
                    
                    terraform apply "$plan_path" || exit 1
                    cd - > /dev/null
                done
                set -e

  notify:
    name: Notify destroy webhook
    runs-on: ubuntu-latest
    environment: ${{ inputs.notify_environment }}
    needs:
      - plan
      - apply
    if: always()
    steps:
      - name: Notify webhook and run destroy
        run: |
          echo "Triggering webhook to approve destroy..."

          INFRA_DIR="${{ needs.plan.outputs.infra_dir }}"
          TOKEN="${{ secrets.destroyer_token }}"
          WEBHOOK_URL="${{ secrets.render_webhook_url }}"

          PAYLOAD=$(jq -n \
            --arg token "$TOKEN" \
            --arg infra_dir "$INFRA_DIR" \
            '{token: $token, infra_dir: $infra_dir}')

          echo "Sending payload: $PAYLOAD"
      
          response=$(curl -s -w "%{http_code}" -o response.out -X POST "$WEBHOOK_URL" \
            -H "Content-Type: application/json" \
            -d "$PAYLOAD")

          if [[ "$response" != "200" ]]; then
            echo "Webhook failed. HTTP $response"
            cat response.out
            exit 1
          fi

          echo "Webhook accepted. Awaiting approval for destroy."
